{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tanng\\\\Desktop\\\\Lab8\\\\lab8\\\\dashbourd-ui\\\\src\\\\components\\\\AppStats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../App.css';\nexport default function AppStats() {\n  _s();\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [stats, setStats] = useState({});\n  const [error, setError] = useState(null);\n\n  const getStats = () => {\n    fetch(`http://tanlab6a.eastus.cloudapp.azure.com:8100/stats`).then(res => res.json()).then(result => {\n      console.log(\"Received Stats\");\n      setStats(result);\n      setIsLoaded(true);\n    }, error => {\n      setError(error);\n      setIsLoaded(true);\n    });\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => getStats(), 2000); // Update every 2 seconds\n\n    return () => clearInterval(interval);\n  }, [getStats]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: \"Error found when fetching from API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this);\n  } else if (isLoaded === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  } else if (isLoaded === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Latest Stats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"StatsTable\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Students\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Classes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"# BP: \", stats['student_count']]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"# HR: \", stats['class_count']]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colspan: \"2\",\n              children: [\"Max BP Systolic: \", stats['most_popular_cit_class']]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colspan: \"2\",\n              children: [\"Max BR Diastolic: \", stats['num_students_in_class']]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Last Updated: \", stats['last_updated']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AppStats, \"3001d2VqWNGT0O3XvOaAFCO69Sw=\");\n\n_c = AppStats;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppStats\");","map":{"version":3,"sources":["C:/Users/tanng/Desktop/Lab8/lab8/dashbourd-ui/src/components/AppStats.js"],"names":["React","useEffect","useState","AppStats","isLoaded","setIsLoaded","stats","setStats","error","setError","getStats","fetch","then","res","json","result","console","log","interval","setInterval","clearInterval"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEH,QAAMQ,QAAQ,GAAG,MAAM;AAEhBC,IAAAA,KAAK,CAAE,sDAAF,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,MAAD,IAAU;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACYV,MAAAA,QAAQ,CAACQ,MAAD,CAAR;AACAV,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KANL,EAMOG,KAAD,IAAU;AACRC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAH,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KATL;AAUH,GAZJ;;AAaGJ,EAAAA,SAAS,CAAC,MAAM;AAClB,UAAMiB,QAAQ,GAAGC,WAAW,CAAC,MAAMT,QAAQ,EAAf,EAAmB,IAAnB,CAA5B,CADkB,CACoC;;AACtD,WAAM,MAAMU,aAAa,CAACF,QAAD,CAAzB;AACG,GAHQ,EAGN,CAACR,QAAD,CAHM,CAAT;;AAKA,MAAIF,KAAJ,EAAU;AACN,wBAAQ;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACH,GAFD,MAEO,IAAIJ,QAAQ,KAAK,KAAjB,EAAuB;AAC1B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA,IAAIA,QAAQ,KAAK,IAAjB,EAAsB;AACzB,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,SAAS,EAAE,YAAlB;AAAA,+BACX;AAAA,kCACC;AAAA,oCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAKC;AAAA,oCACC;AAAA,mCAAWE,KAAK,CAAC,eAAD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAA,mCAAWA,KAAK,CAAC,aAAD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBALD,eASC;AAAA,mCACC;AAAI,cAAA,OAAO,EAAC,GAAZ;AAAA,8CAAkCA,KAAK,CAAC,wBAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBATD,eAYC;AAAA,mCACC;AAAI,cAAA,OAAO,EAAC,GAAZ;AAAA,+CAAmCA,KAAK,CAAC,uBAAD,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AADW;AAAA;AAAA;AAAA;AAAA,cAFJ,eAoBI;AAAA,qCAAmBA,KAAK,CAAC,cAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAyBH;AACJ;;GAtDuBH,Q;;KAAAA,Q","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport '../App.css';\r\n\r\nexport default function AppStats() {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [stats, setStats] = useState({});\r\n    const [error, setError] = useState(null)\r\n\r\n\tconst getStats = () => {\r\n        \r\n        fetch(`http://tanlab6a.eastus.cloudapp.azure.com:8100/stats`)\r\n            .then(res => res.json())\r\n            .then((result)=>{\r\n\t\t\t\tconsole.log(\"Received Stats\")\r\n                setStats(result);\r\n                setIsLoaded(true);\r\n            },(error) =>{\r\n                setError(error)\r\n                setIsLoaded(true);\r\n            })\r\n    }\r\n    useEffect(() => {\r\n\t\tconst interval = setInterval(() => getStats(), 2000); // Update every 2 seconds\r\n\t\treturn() => clearInterval(interval);\r\n    }, [getStats]);\r\n\r\n    if (error){\r\n        return (<div className={\"error\"}>Error found when fetching from API</div>)\r\n    } else if (isLoaded === false){\r\n        return(<div>Loading...</div>)\r\n    } else if (isLoaded === true){\r\n        return(\r\n            <div>\r\n                <h1>Latest Stats</h1>\r\n                <table className={\"StatsTable\"}>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Students</th>\r\n\t\t\t\t\t\t\t<th>Classes</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td># BP: {stats['student_count']}</td>\r\n\t\t\t\t\t\t\t<td># HR: {stats['class_count']}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td colspan=\"2\">Max BP Systolic: {stats['most_popular_cit_class']}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td colspan=\"2\">Max BR Diastolic: {stats['num_students_in_class']}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n                </table>\r\n                <h3>Last Updated: {stats['last_updated']}</h3>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}